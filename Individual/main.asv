%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                main.m                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%               Static elastic analysis for plane problems                %
%                      with 4-node finite elements                        %
%                                                                         %
%                       Author: Giuseppe COCCHETTI                        %
%                                                                         %
%                            version 19.05.2011                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       THIS SOFTWARE IS TO BE USED FOR LEARNING PURPOSES ONLY            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This code is made of a core routine transferring data to the following  %
% functions:                                                              %
%  - geotop: defines geometry and topology data;                          %
%  - mecpar: defines mechanical parameters;    
%  - masspar: defines density of the elements;
%  - locons: defines boundary conditions (loads and constraints);         %
%  - GaussCW: defines the coordinates and weights for Gauss integration;  %
%  - stiffm: generates the stiffness matrix for each element; 
%  - Melement: generates the mass matrix for each element;
%  - assilc: assigns boundary conditions (nodal loads and constraints);   %
%  - syssol: solves the equation system
%            computes eigenvalues and eigenvectors;                       %
%  - stress: computes stresses at Gauss points;                           %
%  - figcre: creates the window of a figure;                              %
%  - nodeconf: displays the nodes of the mesh;                            %
%  - memconf: displays the finite element mesh;                           %
%  - stressNodes: extrapolates stresses at nodes both with shape function %
%                          interpolation and the average of nodal values; %
%  - drawstress: plot stress contours;                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear
close all
clc
format short e
disp('Static elastic analysis for plane problems')

%%%%%%%%%%%%%%%%%%%
% Initializations %
%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUT: acquisition of the structural data %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Geometry and topology data
[nInc,nElements,dXY,nNodes]=geotop;

% Mechanical parameters
[dPar]=mecpar;
[dMas]=masspar(nElements);

% Thickness
thickness=1;

% Total number of Gauss points [1(=1x1),4(=2x2),9(=3x3),16(=4x4)]
nGtot=4;
[dCsiEtaG,dWG]=GaussCW(nGtot);

% Boundary conditions: loads and constraints
[nCons,dC,nForce,dF,npq,dpq]=locons(dXY,thickness);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Setting up the solving system %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Total number of dofs (before imposing boundary conditions)
nDofTot=max(max(nInc(:,5:12)));

% Global stiffness and mass matrix
dK=zeros([nDofTot,nDofTot]); 
dM=zeros([nDofTot,nDofTot]);

% Set up and assembly of the stiffness and mass matrices
% of each element
for ne=1:nElements

    n14=nInc(ne,1:4);
    
   
    dXY14=dXY(n14,:);
    
    
    % Stiffness matrix dKne for the ne-th element
    [dKne]=stiffm(dPar,dXY14,thickness,nGtot,dCsiEtaG,dWG);
    % Mass matrix dMne --- nb dMne is 4x4 because m_xy = 0
    [dMne] = Melement(dMas(ne),dXY14,thickness,nGtot,dCsiEtaG,dWG);
    

    
    if  ne==1 ||ne== 2 || ne==3 || ne==4 || ne==5 || ne==6 || ne==7 || ne==8 || ne==9 || ne==10 || ne==11
        Kmats(:,:,ne)=dKne;
    end
    % Assembly of the overall stiffness matrix
    nVne=[nInc(ne,5:12)]; % Recovers the Dofs of the ne-th element
    dK(nVne,nVne)=dK(nVne,nVne)+dKne; % Global stiffness matrix dK; Element stiffness matrix dKne
    
    % Assembly of the overall mass matrix
    nVnx = nVne(1:2:end); % x oriented element's DoF
    dM(nVnx,nVnx)=dM(nVnx,nVnx)+dMne;
    nVny = nVne(2:2:end); % y oriented element's DoF
    dM(nVny,nVny)=dM(nVny,nVny)+dMne;
    
end

% Boundary conditions: nodal constraints and loads
[nUs,dUs,nUu,dT]=assilc(nInc,nForce,dF,nCons,dC,npq,dpq,dXY,thickness,nDofTot,nGtot,dCsiEtaG,dWG);

% Solution of linear system
[du,dR, evals, evecs]=syssol(dK,dM,dT,nUu,nUs,dUs,nDofTot);





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUT 2: graphical representation of the computational results %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%Characteristic structural dimensions
dXmin=min(dXY(:,1));
dXmax=max(dXY(:,1));
dYmin=min(dXY(:,2));
dYmax=max(dXY(:,2));
dimXmax=dXmax-dXmin;
if (dimXmax==0)
    dimXmax=1;
end
dimYmax=dYmax-dYmin;
if (dimYmax==0)
    dimYmax=1;
end


vCoordFig=[10,140,520,320]; 
vCoordAxes=[dXmin-dimXmax/10,dXmax+dimXmax/10,dYmin-dimYmax/10,dYmax+dimYmax/10];
cTit='Structural Scheme';
figcre(1,vCoordFig,vCoordAxes,cTit);

% Hinge radius (N.B.: graphical convention only!)
dr=max(dimXmax,dimYmax)/100;

% Drawing of nodes
nodeconf(nNodes,dXY,dr);

% Drawing of members
bElemLabels=0;
memconf(bElemLabels,nElements,nInc,dXY,'b-');

% FIGURE 2: DEFORMED AND UNDEFORMED STRUCTURE
% New window
vCoordFig=[500,10,520,320]; 
vCoordAxes=[dXmin-dimXmax/8,dXmax+dimXmax/8,dYmin-dimYmax/8,dYmax+dimYmax/8]; 
cTit='Deformed Configuration';
figcre(2,vCoordFig,vCoordAxes,cTit);

bElemLabels=0;
% Drawing of undeformed structure
memconf(bElemLabels,nElements,nInc,dXY,'k:');

% Amplification factor for the graphical representation of displacements 
dSmax=max(dimXmax,dimYmax)/20;
dUmax=norm(du,inf);
dAmplif=10^(ceil(log10(dSmax/dUmax)))/4;
text(dXmin,dYmax+dimYmax/5,sprintf('Displacement amplification factor: %0.5g',dAmplif))

% Drawing of deformed structure
dXYa=[dXY(:,1)+dAmplif*du(1:2:end,1),dXY(:,2)+dAmplif*du(2:2:end,1)];
memconf(bElemLabels,nElements,nInc,dXYa,'b-');

% Drawing of modal shapes
vCoordFig=[510,20,520,320]; 
for mode = 1:6
    devec = evecs(:,mode);
    figcre(20+mode,vCoordFig,vCoordAxes,sprintf(['\\fontname{Times New Roman}\\fontsize{23} \\it Mode %2d,  T_{\\fontsize{12}%2d} = %.2f ms, \\omega_{\\fontsize{12}%2d}^{\\fontsize{12}2} = %.2f rad^{\\fontsize{12}2}/s^{\\fontsize{12}2} , \\omega_{\\fontsize{12}%2d} = %.2f rad/s, f_{\\fontsize{12}%2d} = %.2f Hz'], mode,mode,(2000*pi)/sqrt(evals(mode)), mode,(evals(mode)) ,mode, sqrt(evals(mode)), mode, sqrt(evals(mode))/(2*pi)));
    vCoordFig(1:2) = vCoordFig(1:2)+10*ones(1,2); 
    dSmax=max(dimXmax,dimYmax)/20;
    dUmax=norm(devec,inf);
    dAmplif=4^ceil(log10(dSmax/dUmax));
    %text(dXmin,dYmax+dimYmax/5,sprintf('Displacement amplification factor: %0.5g',dAmplif))
    
    % Drawing of undeformed structure and modal shape
    memconf(bElemLabels,nElements,nInc,dXY,'k:');
    dXYe1=[dXY(:,1)+dAmplif*devec(1:2:end,1),dXY(:,2)+dAmplif*devec(2:2:end,1)];
    memconf(bElemLabels,nElements,nInc,dXYe1,'m-');
    xlabel(sprintf('\\fontname{Times New Roman} \\fontsize{18} X [m]'))
    ylabel(sprintf('\\fontname{Times New Roman} \\fontsize{18} Y [m]'))
end



% ***********************************************************************
%% ******* Indivisual Part 1 (Undamped Sys): Modal Analysis *************
% ***********************************************************************

% A: Node  217
% B : Node 169

% Units N m kg s
nDOF_cond1=337;
nDOF_cond2=[337 433];

r_cond1=zeros(nDofTot,1);
r_cond1(nDOF_cond1)=+1;

r_cond2=zeros(nDofTot,1);
r_cond2(nDOF_cond2)= [+1 , -1];

%.....:::: Modal Contrib. Responses ::::....
[iii,nMod]=size(evecs);
M_star=diag(evecs'*dM*evecs).*eye(nMod);

GammaVec_cond1=zeros(nMod,1);
GammaVec_cond2=zeros(nMod,1);

for i=1:nMod
    GammaVec_cond1(i)=(evecs(:,i)'*dM*r_cond1)/M_star(i,i);   %
    GammaVec_cond2(i)=(evecs(:,i)'*dM*r_cond2)/M_star(i,i);   %
end

GammaVec_cond1=GammaVec_cond1'*eye(nMod); 
GammaVec_cond2=GammaVec_cond2'*eye(nMod);

vecPlot=1:5;
figure(1001)
plot( vecPlot , GammaVec_cond1(vecPlot) , 'Marker','diamond','Color',[100 25 100]/225)
hold on
plot( vecPlot , GammaVec_cond2(vecPlot) , 'Marker','square','Color',[200 50 100]/225)

xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Mode #')
ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} Modal Prticip. Factor [m/ s^2]')
legend("Condition 1 (+1 on B)" , "Condition 2 (+1 on B and -1 on A)")
title('\it \bf \fontsize{18} \fontname{Times New Roman} Modal Participation Factor diagram')
xticks([vecPlot])
hold off

disp(GammaVec_cond1(vecPlot))
disp(GammaVec_cond2(vecPlot))

vecT=0:0.0001:pi/60;
% Condition 1 : Modal Displcamenets  
for j=1:4 % Modes
 
    vecModalDsip=GammaVec_cond1(j) * (    1-cos(evals(j)*vecT   )   );
    figure(10020+j)
    plot(vecT,vecModalDsip*1000,'k')
    title("\it \bf \fontsize{18} \fontname{Times New Roman} Mode " + j + " : Modal Displacement q(t) Condition 1 ")
    xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Time[s]')
    ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} Modal Displacement [mm]')
    ylim([-6e-3 8e-3])

end

vecT=0:0.0001:pi/60;
% Condition 2 : Modal Displcamenets  
for j=1:4 % Modes
 
    vecModalDsip=GammaVec_cond2(j) * (    1-cos(evals(j)*vecT   )   );
    figure(10030+j)
    plot(vecT,vecModalDsip*1000,'r')
    title("\it \bf \fontsize{18} \fontname{Times New Roman} Mode" + j + " : Modal Displacement q(t) Condition 2 ")
    xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Time[s]')
    ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} Modal Displacement [mm]')
    ylim([-6e-3 8e-3])

end

% % Static Correctioamn Vector
% K_star=diag(evecs'*dK*evecs).*eye(nMod);

i=5;
 R_cond1 =GammaVec_cond1(i) * dM * evecs (:,i);
 R_cond2 =GammaVec_cond2(i) * dM * evecs (:,i);

 [du_cond1,~, ~, ~]=syssol(dK,dM,R_cond1,nUu,nUs,dUs,nDofTot);
[du_cond2,~,~, ~]=syssol(dK,dM,R_cond2,nUu,nUs,dUs,nDofTot);

% COND 1  New window
vCoordFig=[500,10,520,320]; 
vCoordAxes=[dXmin-dimXmax/8,dXmax+dimXmax/8,dYmin-dimYmax/8,dYmax+dimYmax/8]; 
cTit='\it \bf \fontsize{18} \fontname{Times New Roman} Static Deformed Configuration Modal 5 Condition 1';
figcre(10041,vCoordFig,vCoordAxes,cTit);
 xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} X [m]')
 ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} Y [m]')

bElemLabels=0;
% % Drawing of undeformed structure
memconf(bElemLabels,nElements,nInc,dXY,'k:');

% Amplification factor for the graphical representation of displacements 
dSmax=max(dimXmax,dimYmax)/20;
dUmax=norm(du_cond1,inf);
dAmplif=10^(ceil(log10(dSmax/dUmax)))/4;
text(dXmin,dYmax+dimYmax/5,sprintf('Displacement amplification factor: %0.5g',dAmplif))

% Drawing of deformed structure
dXYa=[dXY(:,1)+dAmplif*du_cond1(1:2:end,1),dXY(:,2)+dAmplif*du_cond1(2:2:end,1)];
memconf(bElemLabels,nElements,nInc,dXYa,'b-');


% COND2 New window
vCoordFig=[500,10,520,320]; 
vCoordAxes=[dXmin-dimXmax/8,dXmax+dimXmax/8,dYmin-dimYmax/8,dYmax+dimYmax/8]; 
cTit='\it \bf \fontsize{18} \fontname{Times New Roman} Static Deformed Configuration Modal 5 Condition 2';
figcre(10042,vCoordFig,vCoordAxes,cTit);
 xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} X [m]')
 ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} Y [m]')

bElemLabels=0;
% % Drawing of undeformed structure
memconf(bElemLabels,nElements,nInc,dXY,'k:');

% Amplification factor for the graphical representation of displacements 
dSmax=max(dimXmax,dimYmax)/20;
dUmax=norm(du_cond2,inf);
dAmplif=10^(ceil(log10(dSmax/dUmax)))/4;
text(dXmin,dYmax+dimYmax/5,sprintf('Displacement amplification factor: %0.5g',dAmplif))

% Drawing of deformed structure
dXYa=[dXY(:,1)+dAmplif*du_cond2(1:2:end,1),dXY(:,2)+dAmplif*du_cond2(2:2:end,1)];
memconf(bElemLabels,nElements,nInc,dXYa,'b-');


%************************************************************************
%% ************* Indivisual Part 2 : Direct Integration *****************
%************************************************************************

% Ground Acceleration
tempGA=readmatrix('SanFrans.xlsx','Sheet',1,'Range','A5:E1604');
GAinteg=tempGA'; GAinteg=GAinteg(:)';

figure(2001)
plot(.005:0.005:40,GAinteg,'k') %dt=0.0025
title('\it \bf \fontsize{18} \fontname{Times New Roman}  Ground Acceleration (San Francisco Sierra Pt 1989)')
ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} {u}_g [g]')
xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Time [s]')
set(gca,'FontSize',18)

% Determination of Damping Matrix dCdamp
zeta=0.03; 
bvec=2*zeta*sqrt(evals([1,3],1));
Amat=[ones(2,1) ,...
            evals([1,3],1)];
ZZ=Amat\bvec;
dampC=ZZ(1,1)*dM + ZZ(2,1)*dK;


% 4. Constant Acceleration Integration
%Horiz Loading
eee=zeros(nDofTot,1); 
eee(1:2:end)=1; %Loading all Horiz dofs
%eee([1 3 5 7 545 547 549 551])=0; % Horiz Dofs on support

h=0.005; %Time Step

% Initialization of Matrices and Definig Initial Cond.
effectiveP=zeros(nDofTot,length(GAinteg));
for i=1:length(GAinteg)
    effectiveP(:,i)=-dM*eee*GAinteg(i)*9.81; %[Kg.m/s2  =  N]
end
x=zeros(nDofTot,length(GAinteg)); 
xp=zeros(nDofTot,length(GAinteg));
xpp=zeros(nDofTot,length(GAinteg));

A=2*dampC + (4/h)*dM;
B=2*dM;   
Kp=(2/h)*dampC + (4/h^2)*dM; 
dKc=dK+Kp; % for Linear System dK=K_tangent

% Start of iteration
nDOFSt=25;
nDOFEn=456;
for i=1:length(GAinteg)-1 %from step 0 to step end-1
    xpp(:,i)=inv(dM)*(effectiveP(:,i) - dampC*xp(:,i) - dK*x(:,i));
    dPcap=effectiveP(:,i+1) - effectiveP(:,i) + A*xp(:,i) + B*xpp(:,i);
    dx=dKc(nUu,nUu)\dPcap(nUu,1);
    x(nDOFSt:nDOFEn,i+1) =dx + x(nDOFSt:nDOFEn,i);
    xp(nDOFSt:nDOFEn,i+1)=2*dx/h - xp(nDOFSt:nDOFEn,i); 
end
HDOF_PointA=433;
figure(2002)
plot(linspace(0,0.005*(size(x,2)-1),size(x,2)),x(HDOF_PointA,:)*1000,'b') %dt=0.005
title('\it \bf \fontsize{18} \fontname{Times New Roman} Horizontal Displacement of Node A (u_A)')
ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} u_A [mm]') 
xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Time [s]')
set(gca,'FontSize',18)


DOFvert=[2:2:22];
armDOFVert=dXY(12,1) - dXY(1:11,1);

dR=zeros(48,1);
for i=1:length(GAinteg) %from step 0 to step end-1
    for j=1:11
       dR(nInc(j,5:end) , 1) = Kmats(:,:,j) * x(   nInc(j,5:end)   ,   i )   + dR(nInc(j,5:end) , 1) ;
    end

    BendM(i)=dR(DOFvert)'*armDOFVert;
end

figure(2003)
plot(.005:0.005:40,GAinteg*1000,'k') %dt=0.005
title('\it \bf \fontsize{18} \fontname{Times New Roman} Overturning Bending Moment over Node E (M_E)')
ylabel('\it \bf \fontsize{18} \fontname{Times New Roman} M_E [N.mm]') 
xlabel('\it \bf \fontsize{18} \fontname{Times New Roman} Time [s]')
set(gca,'FontSize',18)





